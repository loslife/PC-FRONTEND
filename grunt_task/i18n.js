// Generated by CoffeeScript 1.6.3
var path;

path = require('path');

module.exports = function(grunt) {
    var generateOutputPath, translateTemplate;
    grunt.registerMultiTask('yilosi18n', 'Localize Grunt templates', function() {
        var localePath, localePaths, options, outputPath, template, templatePath, _i, _len, _ref, _results;
        options = this.options({
            locales: [],
            output: '.',
            base: ''
        });
        grunt.verbose.writeflags(options, 'Options');
        _ref = this.filesSrc;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            templatePath = _ref[_i];
            if (!grunt.file.isFile(templatePath)) {
                grunt.fail.warn("" + templatePath + " is not a file.");
            }
            localePaths = grunt.file.expand(options.locales);
            _results.push((function() {
                var _j, _len1, _results1;
                _results1 = [];
                for (_j = 0, _len1 = localePaths.length; _j < _len1; _j++) {
                    localePath = localePaths[_j];
                    outputPath = generateOutputPath(templatePath, localePath, options);
                    template = translateTemplate(templatePath, localePath, options);
                    grunt.verbose.writeln("Translating '" + templatePath + "' with locale '" + localePath + "' to '" + outputPath + "'.");
                    _results1.push(grunt.file.write(outputPath, template));
                }
                return _results1;
            })());
        }
        return _results;
    });
    translateTemplate = function(templatePath, localePath, options) {
        var locale, template, templateOptions;
        template = grunt.file.read(templatePath);
        if (/(\.yaml|\.yml)$/.test(localePath)) {
            locale = grunt.file.readYAML(localePath);
        } else {
            locale = grunt.file.readJSON(localePath);
        }
        templateOptions = {
            data: locale
        };
        if (options.delimiters) {
            templateOptions.delimiters = options.delimiters;
        }
        return grunt.template.process(template, templateOptions);
    };
    generateOutputPath = function(templatePath, localePath, options) {
        var filePath, localeFolder, trimmedFilePath;
        localeFolder =  localePath.substring(0,localePath.lastIndexOf("/"));
        localeFolder = localeFolder.substring(localeFolder.lastIndexOf("/")+1,localePath.length);
        if (grunt.util._.startsWith(templatePath, options.base)) {
            filePath = templatePath.slice(options.base.length);
        }
        trimmedFilePath = grunt.util._.trim(filePath, '/');

        trimmedFilePath = trimmedFilePath.substring(0,trimmedFilePath.lastIndexOf("."))+"_"+localeFolder+ trimmedFilePath.substring(trimmedFilePath.lastIndexOf("."));
        return [options.output, trimmedFilePath].join('/');
    };
    return this;
};
